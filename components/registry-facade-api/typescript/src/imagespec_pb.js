/**
 * Copyright (c) 2021 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License-AGPL.txt in the project root for license information.
 */

// source: imagespec.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.registryfacade.ContentLayer', null, global);
goog.exportSymbol('proto.registryfacade.ContentLayer.SpecCase', null, global);
goog.exportSymbol('proto.registryfacade.DirectContentLayer', null, global);
goog.exportSymbol('proto.registryfacade.EnvVarApplication', null, global);
goog.exportSymbol('proto.registryfacade.EnvironmentVariable', null, global);
goog.exportSymbol('proto.registryfacade.ImageSpec', null, global);
goog.exportSymbol('proto.registryfacade.RemoteContentLayer', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registryfacade.ImageSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.registryfacade.ImageSpec.repeatedFields_, null);
};
goog.inherits(proto.registryfacade.ImageSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registryfacade.ImageSpec.displayName = 'proto.registryfacade.ImageSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registryfacade.ContentLayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.registryfacade.ContentLayer.oneofGroups_);
};
goog.inherits(proto.registryfacade.ContentLayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registryfacade.ContentLayer.displayName = 'proto.registryfacade.ContentLayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registryfacade.RemoteContentLayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.registryfacade.RemoteContentLayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registryfacade.RemoteContentLayer.displayName = 'proto.registryfacade.RemoteContentLayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registryfacade.DirectContentLayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.registryfacade.DirectContentLayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registryfacade.DirectContentLayer.displayName = 'proto.registryfacade.DirectContentLayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registryfacade.EnvironmentVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.registryfacade.EnvironmentVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registryfacade.EnvironmentVariable.displayName = 'proto.registryfacade.EnvironmentVariable';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.registryfacade.ImageSpec.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registryfacade.ImageSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.registryfacade.ImageSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registryfacade.ImageSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.ImageSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseRef: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ideRef: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contentLayerList: jspb.Message.toObjectList(msg.getContentLayerList(),
    proto.registryfacade.ContentLayer.toObject, includeInstance),
    environmentVariableList: jspb.Message.toObjectList(msg.getEnvironmentVariableList(),
    proto.registryfacade.EnvironmentVariable.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registryfacade.ImageSpec}
 */
proto.registryfacade.ImageSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registryfacade.ImageSpec;
  return proto.registryfacade.ImageSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registryfacade.ImageSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registryfacade.ImageSpec}
 */
proto.registryfacade.ImageSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdeRef(value);
      break;
    case 3:
      var value = new proto.registryfacade.ContentLayer;
      reader.readMessage(value,proto.registryfacade.ContentLayer.deserializeBinaryFromReader);
      msg.addContentLayer(value);
      break;
    case 4:
      var value = new proto.registryfacade.EnvironmentVariable;
      reader.readMessage(value,proto.registryfacade.EnvironmentVariable.deserializeBinaryFromReader);
      msg.addEnvironmentVariable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registryfacade.ImageSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registryfacade.ImageSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registryfacade.ImageSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.ImageSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdeRef();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContentLayerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.registryfacade.ContentLayer.serializeBinaryToWriter
    );
  }
  f = message.getEnvironmentVariableList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.registryfacade.EnvironmentVariable.serializeBinaryToWriter
    );
  }
};


/**
 * optional string base_ref = 1;
 * @return {string}
 */
proto.registryfacade.ImageSpec.prototype.getBaseRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.ImageSpec} returns this
 */
proto.registryfacade.ImageSpec.prototype.setBaseRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ide_ref = 2;
 * @return {string}
 */
proto.registryfacade.ImageSpec.prototype.getIdeRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.ImageSpec} returns this
 */
proto.registryfacade.ImageSpec.prototype.setIdeRef = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ContentLayer content_layer = 3;
 * @return {!Array<!proto.registryfacade.ContentLayer>}
 */
proto.registryfacade.ImageSpec.prototype.getContentLayerList = function() {
  return /** @type{!Array<!proto.registryfacade.ContentLayer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.registryfacade.ContentLayer, 3));
};


/**
 * @param {!Array<!proto.registryfacade.ContentLayer>} value
 * @return {!proto.registryfacade.ImageSpec} returns this
*/
proto.registryfacade.ImageSpec.prototype.setContentLayerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.registryfacade.ContentLayer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.registryfacade.ContentLayer}
 */
proto.registryfacade.ImageSpec.prototype.addContentLayer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.registryfacade.ContentLayer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.registryfacade.ImageSpec} returns this
 */
proto.registryfacade.ImageSpec.prototype.clearContentLayerList = function() {
  return this.setContentLayerList([]);
};


/**
 * repeated EnvironmentVariable environment_variable = 4;
 * @return {!Array<!proto.registryfacade.EnvironmentVariable>}
 */
proto.registryfacade.ImageSpec.prototype.getEnvironmentVariableList = function() {
  return /** @type{!Array<!proto.registryfacade.EnvironmentVariable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.registryfacade.EnvironmentVariable, 4));
};


/**
 * @param {!Array<!proto.registryfacade.EnvironmentVariable>} value
 * @return {!proto.registryfacade.ImageSpec} returns this
*/
proto.registryfacade.ImageSpec.prototype.setEnvironmentVariableList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.registryfacade.EnvironmentVariable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.registryfacade.EnvironmentVariable}
 */
proto.registryfacade.ImageSpec.prototype.addEnvironmentVariable = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.registryfacade.EnvironmentVariable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.registryfacade.ImageSpec} returns this
 */
proto.registryfacade.ImageSpec.prototype.clearEnvironmentVariableList = function() {
  return this.setEnvironmentVariableList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.registryfacade.ContentLayer.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.registryfacade.ContentLayer.SpecCase = {
  SPEC_NOT_SET: 0,
  REMOTE: 1,
  DIRECT: 2
};

/**
 * @return {proto.registryfacade.ContentLayer.SpecCase}
 */
proto.registryfacade.ContentLayer.prototype.getSpecCase = function() {
  return /** @type {proto.registryfacade.ContentLayer.SpecCase} */(jspb.Message.computeOneofCase(this, proto.registryfacade.ContentLayer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registryfacade.ContentLayer.prototype.toObject = function(opt_includeInstance) {
  return proto.registryfacade.ContentLayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registryfacade.ContentLayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.ContentLayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    remote: (f = msg.getRemote()) && proto.registryfacade.RemoteContentLayer.toObject(includeInstance, f),
    direct: (f = msg.getDirect()) && proto.registryfacade.DirectContentLayer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registryfacade.ContentLayer}
 */
proto.registryfacade.ContentLayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registryfacade.ContentLayer;
  return proto.registryfacade.ContentLayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registryfacade.ContentLayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registryfacade.ContentLayer}
 */
proto.registryfacade.ContentLayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.registryfacade.RemoteContentLayer;
      reader.readMessage(value,proto.registryfacade.RemoteContentLayer.deserializeBinaryFromReader);
      msg.setRemote(value);
      break;
    case 2:
      var value = new proto.registryfacade.DirectContentLayer;
      reader.readMessage(value,proto.registryfacade.DirectContentLayer.deserializeBinaryFromReader);
      msg.setDirect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registryfacade.ContentLayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registryfacade.ContentLayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registryfacade.ContentLayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.ContentLayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemote();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.registryfacade.RemoteContentLayer.serializeBinaryToWriter
    );
  }
  f = message.getDirect();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.registryfacade.DirectContentLayer.serializeBinaryToWriter
    );
  }
};


/**
 * optional RemoteContentLayer remote = 1;
 * @return {?proto.registryfacade.RemoteContentLayer}
 */
proto.registryfacade.ContentLayer.prototype.getRemote = function() {
  return /** @type{?proto.registryfacade.RemoteContentLayer} */ (
    jspb.Message.getWrapperField(this, proto.registryfacade.RemoteContentLayer, 1));
};


/**
 * @param {?proto.registryfacade.RemoteContentLayer|undefined} value
 * @return {!proto.registryfacade.ContentLayer} returns this
*/
proto.registryfacade.ContentLayer.prototype.setRemote = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.registryfacade.ContentLayer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.registryfacade.ContentLayer} returns this
 */
proto.registryfacade.ContentLayer.prototype.clearRemote = function() {
  return this.setRemote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.registryfacade.ContentLayer.prototype.hasRemote = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DirectContentLayer direct = 2;
 * @return {?proto.registryfacade.DirectContentLayer}
 */
proto.registryfacade.ContentLayer.prototype.getDirect = function() {
  return /** @type{?proto.registryfacade.DirectContentLayer} */ (
    jspb.Message.getWrapperField(this, proto.registryfacade.DirectContentLayer, 2));
};


/**
 * @param {?proto.registryfacade.DirectContentLayer|undefined} value
 * @return {!proto.registryfacade.ContentLayer} returns this
*/
proto.registryfacade.ContentLayer.prototype.setDirect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.registryfacade.ContentLayer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.registryfacade.ContentLayer} returns this
 */
proto.registryfacade.ContentLayer.prototype.clearDirect = function() {
  return this.setDirect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.registryfacade.ContentLayer.prototype.hasDirect = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registryfacade.RemoteContentLayer.prototype.toObject = function(opt_includeInstance) {
  return proto.registryfacade.RemoteContentLayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registryfacade.RemoteContentLayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.RemoteContentLayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    digest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    diffId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mediaType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    size: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registryfacade.RemoteContentLayer}
 */
proto.registryfacade.RemoteContentLayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registryfacade.RemoteContentLayer;
  return proto.registryfacade.RemoteContentLayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registryfacade.RemoteContentLayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registryfacade.RemoteContentLayer}
 */
proto.registryfacade.RemoteContentLayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDigest(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDiffId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMediaType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registryfacade.RemoteContentLayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registryfacade.RemoteContentLayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registryfacade.RemoteContentLayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.RemoteContentLayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDigest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDiffId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMediaType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.registryfacade.RemoteContentLayer.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.RemoteContentLayer} returns this
 */
proto.registryfacade.RemoteContentLayer.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string digest = 2;
 * @return {string}
 */
proto.registryfacade.RemoteContentLayer.prototype.getDigest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.RemoteContentLayer} returns this
 */
proto.registryfacade.RemoteContentLayer.prototype.setDigest = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string diff_id = 3;
 * @return {string}
 */
proto.registryfacade.RemoteContentLayer.prototype.getDiffId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.RemoteContentLayer} returns this
 */
proto.registryfacade.RemoteContentLayer.prototype.setDiffId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string media_type = 4;
 * @return {string}
 */
proto.registryfacade.RemoteContentLayer.prototype.getMediaType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.RemoteContentLayer} returns this
 */
proto.registryfacade.RemoteContentLayer.prototype.setMediaType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 size = 5;
 * @return {number}
 */
proto.registryfacade.RemoteContentLayer.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.registryfacade.RemoteContentLayer} returns this
 */
proto.registryfacade.RemoteContentLayer.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registryfacade.DirectContentLayer.prototype.toObject = function(opt_includeInstance) {
  return proto.registryfacade.DirectContentLayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registryfacade.DirectContentLayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.DirectContentLayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registryfacade.DirectContentLayer}
 */
proto.registryfacade.DirectContentLayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registryfacade.DirectContentLayer;
  return proto.registryfacade.DirectContentLayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registryfacade.DirectContentLayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registryfacade.DirectContentLayer}
 */
proto.registryfacade.DirectContentLayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registryfacade.DirectContentLayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registryfacade.DirectContentLayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registryfacade.DirectContentLayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.DirectContentLayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.registryfacade.DirectContentLayer.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.registryfacade.DirectContentLayer.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.registryfacade.DirectContentLayer.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.registryfacade.DirectContentLayer} returns this
 */
proto.registryfacade.DirectContentLayer.prototype.setContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registryfacade.EnvironmentVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.registryfacade.EnvironmentVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registryfacade.EnvironmentVariable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.EnvironmentVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registryfacade.EnvironmentVariable}
 */
proto.registryfacade.EnvironmentVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registryfacade.EnvironmentVariable;
  return proto.registryfacade.EnvironmentVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registryfacade.EnvironmentVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registryfacade.EnvironmentVariable}
 */
proto.registryfacade.EnvironmentVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!proto.registryfacade.EnvVarApplication} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registryfacade.EnvironmentVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registryfacade.EnvironmentVariable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registryfacade.EnvironmentVariable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.EnvironmentVariable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.registryfacade.EnvironmentVariable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.EnvironmentVariable} returns this
 */
proto.registryfacade.EnvironmentVariable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.registryfacade.EnvironmentVariable.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.EnvironmentVariable} returns this
 */
proto.registryfacade.EnvironmentVariable.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional EnvVarApplication mode = 3;
 * @return {!proto.registryfacade.EnvVarApplication}
 */
proto.registryfacade.EnvironmentVariable.prototype.getMode = function() {
  return /** @type {!proto.registryfacade.EnvVarApplication} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.registryfacade.EnvVarApplication} value
 * @return {!proto.registryfacade.EnvironmentVariable} returns this
 */
proto.registryfacade.EnvironmentVariable.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.registryfacade.EnvVarApplication = {
  SET_IF_NOT_EXISTS: 0,
  OVERWRITE: 1,
  APPEND: 2,
  PREPEND: 3
};

goog.object.extend(exports, proto.registryfacade);
