/**
 * Copyright (c) 2021 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License-AGPL.txt in the project root for license information.
 */

// source: provider.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var imagespec_pb = require('./imagespec_pb.js');
goog.object.extend(proto, imagespec_pb);
var content$service$api_initializer_pb = require('@gitpod/content-service/lib');
goog.object.extend(proto, content$service$api_initializer_pb);
goog.exportSymbol('proto.registryfacade.AdmissionLevel', null, global);
goog.exportSymbol('proto.registryfacade.GetImageSpecRequest', null, global);
goog.exportSymbol('proto.registryfacade.GetImageSpecResponse', null, global);
goog.exportSymbol('proto.registryfacade.GetOfflineImageSpecRequest', null, global);
goog.exportSymbol('proto.registryfacade.GetWorkspaceContextRequest', null, global);
goog.exportSymbol('proto.registryfacade.GetWorkspaceContextResponse', null, global);
goog.exportSymbol('proto.registryfacade.GitSpec', null, global);
goog.exportSymbol('proto.registryfacade.PortSpec', null, global);
goog.exportSymbol('proto.registryfacade.PortVisibility', null, global);
goog.exportSymbol('proto.registryfacade.StartWorkspaceSpec', null, global);
goog.exportSymbol('proto.registryfacade.WorkspaceMetadata', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registryfacade.GetImageSpecRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.registryfacade.GetImageSpecRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registryfacade.GetImageSpecRequest.displayName = 'proto.registryfacade.GetImageSpecRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registryfacade.GetOfflineImageSpecRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.registryfacade.GetOfflineImageSpecRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registryfacade.GetOfflineImageSpecRequest.displayName = 'proto.registryfacade.GetOfflineImageSpecRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registryfacade.GetImageSpecResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.registryfacade.GetImageSpecResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registryfacade.GetImageSpecResponse.displayName = 'proto.registryfacade.GetImageSpecResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registryfacade.GetWorkspaceContextRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.registryfacade.GetWorkspaceContextRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registryfacade.GetWorkspaceContextRequest.displayName = 'proto.registryfacade.GetWorkspaceContextRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registryfacade.GetWorkspaceContextResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.registryfacade.GetWorkspaceContextResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registryfacade.GetWorkspaceContextResponse.displayName = 'proto.registryfacade.GetWorkspaceContextResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registryfacade.StartWorkspaceSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.registryfacade.StartWorkspaceSpec.repeatedFields_, null);
};
goog.inherits(proto.registryfacade.StartWorkspaceSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registryfacade.StartWorkspaceSpec.displayName = 'proto.registryfacade.StartWorkspaceSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registryfacade.GitSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.registryfacade.GitSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registryfacade.GitSpec.displayName = 'proto.registryfacade.GitSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registryfacade.PortSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.registryfacade.PortSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registryfacade.PortSpec.displayName = 'proto.registryfacade.PortSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registryfacade.WorkspaceMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.registryfacade.WorkspaceMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registryfacade.WorkspaceMetadata.displayName = 'proto.registryfacade.WorkspaceMetadata';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registryfacade.GetImageSpecRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.registryfacade.GetImageSpecRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registryfacade.GetImageSpecRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.GetImageSpecRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registryfacade.GetImageSpecRequest}
 */
proto.registryfacade.GetImageSpecRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registryfacade.GetImageSpecRequest;
  return proto.registryfacade.GetImageSpecRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registryfacade.GetImageSpecRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registryfacade.GetImageSpecRequest}
 */
proto.registryfacade.GetImageSpecRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registryfacade.GetImageSpecRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registryfacade.GetImageSpecRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registryfacade.GetImageSpecRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.GetImageSpecRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.registryfacade.GetImageSpecRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.GetImageSpecRequest} returns this
 */
proto.registryfacade.GetImageSpecRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registryfacade.GetOfflineImageSpecRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.registryfacade.GetOfflineImageSpecRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registryfacade.GetOfflineImageSpecRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.GetOfflineImageSpecRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    req: (f = msg.getReq()) && proto.registryfacade.GetWorkspaceContextResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registryfacade.GetOfflineImageSpecRequest}
 */
proto.registryfacade.GetOfflineImageSpecRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registryfacade.GetOfflineImageSpecRequest;
  return proto.registryfacade.GetOfflineImageSpecRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registryfacade.GetOfflineImageSpecRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registryfacade.GetOfflineImageSpecRequest}
 */
proto.registryfacade.GetOfflineImageSpecRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.registryfacade.GetWorkspaceContextResponse;
      reader.readMessage(value,proto.registryfacade.GetWorkspaceContextResponse.deserializeBinaryFromReader);
      msg.setReq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registryfacade.GetOfflineImageSpecRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registryfacade.GetOfflineImageSpecRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registryfacade.GetOfflineImageSpecRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.GetOfflineImageSpecRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReq();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.registryfacade.GetWorkspaceContextResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetWorkspaceContextResponse req = 1;
 * @return {?proto.registryfacade.GetWorkspaceContextResponse}
 */
proto.registryfacade.GetOfflineImageSpecRequest.prototype.getReq = function() {
  return /** @type{?proto.registryfacade.GetWorkspaceContextResponse} */ (
    jspb.Message.getWrapperField(this, proto.registryfacade.GetWorkspaceContextResponse, 1));
};


/**
 * @param {?proto.registryfacade.GetWorkspaceContextResponse|undefined} value
 * @return {!proto.registryfacade.GetOfflineImageSpecRequest} returns this
*/
proto.registryfacade.GetOfflineImageSpecRequest.prototype.setReq = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.registryfacade.GetOfflineImageSpecRequest} returns this
 */
proto.registryfacade.GetOfflineImageSpecRequest.prototype.clearReq = function() {
  return this.setReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.registryfacade.GetOfflineImageSpecRequest.prototype.hasReq = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registryfacade.GetImageSpecResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.registryfacade.GetImageSpecResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registryfacade.GetImageSpecResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.GetImageSpecResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && imagespec_pb.ImageSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registryfacade.GetImageSpecResponse}
 */
proto.registryfacade.GetImageSpecResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registryfacade.GetImageSpecResponse;
  return proto.registryfacade.GetImageSpecResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registryfacade.GetImageSpecResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registryfacade.GetImageSpecResponse}
 */
proto.registryfacade.GetImageSpecResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new imagespec_pb.ImageSpec;
      reader.readMessage(value,imagespec_pb.ImageSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registryfacade.GetImageSpecResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registryfacade.GetImageSpecResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registryfacade.GetImageSpecResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.GetImageSpecResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      imagespec_pb.ImageSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional ImageSpec spec = 1;
 * @return {?proto.registryfacade.ImageSpec}
 */
proto.registryfacade.GetImageSpecResponse.prototype.getSpec = function() {
  return /** @type{?proto.registryfacade.ImageSpec} */ (
    jspb.Message.getWrapperField(this, imagespec_pb.ImageSpec, 1));
};


/**
 * @param {?proto.registryfacade.ImageSpec|undefined} value
 * @return {!proto.registryfacade.GetImageSpecResponse} returns this
*/
proto.registryfacade.GetImageSpecResponse.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.registryfacade.GetImageSpecResponse} returns this
 */
proto.registryfacade.GetImageSpecResponse.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.registryfacade.GetImageSpecResponse.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registryfacade.GetWorkspaceContextRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.registryfacade.GetWorkspaceContextRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registryfacade.GetWorkspaceContextRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.GetWorkspaceContextRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextUrl: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registryfacade.GetWorkspaceContextRequest}
 */
proto.registryfacade.GetWorkspaceContextRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registryfacade.GetWorkspaceContextRequest;
  return proto.registryfacade.GetWorkspaceContextRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registryfacade.GetWorkspaceContextRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registryfacade.GetWorkspaceContextRequest}
 */
proto.registryfacade.GetWorkspaceContextRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registryfacade.GetWorkspaceContextRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registryfacade.GetWorkspaceContextRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registryfacade.GetWorkspaceContextRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.GetWorkspaceContextRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string context_url = 1;
 * @return {string}
 */
proto.registryfacade.GetWorkspaceContextRequest.prototype.getContextUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.GetWorkspaceContextRequest} returns this
 */
proto.registryfacade.GetWorkspaceContextRequest.prototype.setContextUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registryfacade.GetWorkspaceContextResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.registryfacade.GetWorkspaceContextResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registryfacade.GetWorkspaceContextResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.GetWorkspaceContextResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    servicePrefix: jspb.Message.getFieldWithDefault(msg, 2, ""),
    metadata: (f = msg.getMetadata()) && proto.registryfacade.WorkspaceMetadata.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && proto.registryfacade.StartWorkspaceSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registryfacade.GetWorkspaceContextResponse}
 */
proto.registryfacade.GetWorkspaceContextResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registryfacade.GetWorkspaceContextResponse;
  return proto.registryfacade.GetWorkspaceContextResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registryfacade.GetWorkspaceContextResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registryfacade.GetWorkspaceContextResponse}
 */
proto.registryfacade.GetWorkspaceContextResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicePrefix(value);
      break;
    case 3:
      var value = new proto.registryfacade.WorkspaceMetadata;
      reader.readMessage(value,proto.registryfacade.WorkspaceMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 4:
      var value = new proto.registryfacade.StartWorkspaceSpec;
      reader.readMessage(value,proto.registryfacade.StartWorkspaceSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registryfacade.GetWorkspaceContextResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registryfacade.GetWorkspaceContextResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registryfacade.GetWorkspaceContextResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.GetWorkspaceContextResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServicePrefix();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.registryfacade.WorkspaceMetadata.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.registryfacade.StartWorkspaceSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.registryfacade.GetWorkspaceContextResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.GetWorkspaceContextResponse} returns this
 */
proto.registryfacade.GetWorkspaceContextResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string service_prefix = 2;
 * @return {string}
 */
proto.registryfacade.GetWorkspaceContextResponse.prototype.getServicePrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.GetWorkspaceContextResponse} returns this
 */
proto.registryfacade.GetWorkspaceContextResponse.prototype.setServicePrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional WorkspaceMetadata metadata = 3;
 * @return {?proto.registryfacade.WorkspaceMetadata}
 */
proto.registryfacade.GetWorkspaceContextResponse.prototype.getMetadata = function() {
  return /** @type{?proto.registryfacade.WorkspaceMetadata} */ (
    jspb.Message.getWrapperField(this, proto.registryfacade.WorkspaceMetadata, 3));
};


/**
 * @param {?proto.registryfacade.WorkspaceMetadata|undefined} value
 * @return {!proto.registryfacade.GetWorkspaceContextResponse} returns this
*/
proto.registryfacade.GetWorkspaceContextResponse.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.registryfacade.GetWorkspaceContextResponse} returns this
 */
proto.registryfacade.GetWorkspaceContextResponse.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.registryfacade.GetWorkspaceContextResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StartWorkspaceSpec spec = 4;
 * @return {?proto.registryfacade.StartWorkspaceSpec}
 */
proto.registryfacade.GetWorkspaceContextResponse.prototype.getSpec = function() {
  return /** @type{?proto.registryfacade.StartWorkspaceSpec} */ (
    jspb.Message.getWrapperField(this, proto.registryfacade.StartWorkspaceSpec, 4));
};


/**
 * @param {?proto.registryfacade.StartWorkspaceSpec|undefined} value
 * @return {!proto.registryfacade.GetWorkspaceContextResponse} returns this
*/
proto.registryfacade.GetWorkspaceContextResponse.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.registryfacade.GetWorkspaceContextResponse} returns this
 */
proto.registryfacade.GetWorkspaceContextResponse.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.registryfacade.GetWorkspaceContextResponse.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.registryfacade.StartWorkspaceSpec.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.registryfacade.StartWorkspaceSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registryfacade.StartWorkspaceSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.StartWorkspaceSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    workspaceImage: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ideImage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    initializer: (f = msg.getInitializer()) && content$service$api_initializer_pb.WorkspaceInitializer.toObject(includeInstance, f),
    portsList: jspb.Message.toObjectList(msg.getPortsList(),
    proto.registryfacade.PortSpec.toObject, includeInstance),
    envvarsList: jspb.Message.toObjectList(msg.getEnvvarsList(),
    imagespec_pb.EnvironmentVariable.toObject, includeInstance),
    checkoutLocation: jspb.Message.getFieldWithDefault(msg, 7, ""),
    workspaceLocation: jspb.Message.getFieldWithDefault(msg, 8, ""),
    git: (f = msg.getGit()) && proto.registryfacade.GitSpec.toObject(includeInstance, f),
    timeout: jspb.Message.getFieldWithDefault(msg, 10, ""),
    admission: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registryfacade.StartWorkspaceSpec}
 */
proto.registryfacade.StartWorkspaceSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registryfacade.StartWorkspaceSpec;
  return proto.registryfacade.StartWorkspaceSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registryfacade.StartWorkspaceSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registryfacade.StartWorkspaceSpec}
 */
proto.registryfacade.StartWorkspaceSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkspaceImage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdeImage(value);
      break;
    case 4:
      var value = new content$service$api_initializer_pb.WorkspaceInitializer;
      reader.readMessage(value,content$service$api_initializer_pb.WorkspaceInitializer.deserializeBinaryFromReader);
      msg.setInitializer(value);
      break;
    case 5:
      var value = new proto.registryfacade.PortSpec;
      reader.readMessage(value,proto.registryfacade.PortSpec.deserializeBinaryFromReader);
      msg.addPorts(value);
      break;
    case 6:
      var value = new imagespec_pb.EnvironmentVariable;
      reader.readMessage(value,imagespec_pb.EnvironmentVariable.deserializeBinaryFromReader);
      msg.addEnvvars(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheckoutLocation(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkspaceLocation(value);
      break;
    case 9:
      var value = new proto.registryfacade.GitSpec;
      reader.readMessage(value,proto.registryfacade.GitSpec.deserializeBinaryFromReader);
      msg.setGit(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeout(value);
      break;
    case 11:
      var value = /** @type {!proto.registryfacade.AdmissionLevel} */ (reader.readEnum());
      msg.setAdmission(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registryfacade.StartWorkspaceSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registryfacade.StartWorkspaceSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.StartWorkspaceSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkspaceImage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdeImage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInitializer();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      content$service$api_initializer_pb.WorkspaceInitializer.serializeBinaryToWriter
    );
  }
  f = message.getPortsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.registryfacade.PortSpec.serializeBinaryToWriter
    );
  }
  f = message.getEnvvarsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      imagespec_pb.EnvironmentVariable.serializeBinaryToWriter
    );
  }
  f = message.getCheckoutLocation();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getWorkspaceLocation();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getGit();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.registryfacade.GitSpec.serializeBinaryToWriter
    );
  }
  f = message.getTimeout();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getAdmission();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
};


/**
 * optional string workspace_image = 1;
 * @return {string}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.getWorkspaceImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.StartWorkspaceSpec} returns this
 */
proto.registryfacade.StartWorkspaceSpec.prototype.setWorkspaceImage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ide_image = 2;
 * @return {string}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.getIdeImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.StartWorkspaceSpec} returns this
 */
proto.registryfacade.StartWorkspaceSpec.prototype.setIdeImage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional contentservice.WorkspaceInitializer initializer = 4;
 * @return {?proto.contentservice.WorkspaceInitializer}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.getInitializer = function() {
  return /** @type{?proto.contentservice.WorkspaceInitializer} */ (
    jspb.Message.getWrapperField(this, content$service$api_initializer_pb.WorkspaceInitializer, 4));
};


/**
 * @param {?proto.contentservice.WorkspaceInitializer|undefined} value
 * @return {!proto.registryfacade.StartWorkspaceSpec} returns this
*/
proto.registryfacade.StartWorkspaceSpec.prototype.setInitializer = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.registryfacade.StartWorkspaceSpec} returns this
 */
proto.registryfacade.StartWorkspaceSpec.prototype.clearInitializer = function() {
  return this.setInitializer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.hasInitializer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated PortSpec ports = 5;
 * @return {!Array<!proto.registryfacade.PortSpec>}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.getPortsList = function() {
  return /** @type{!Array<!proto.registryfacade.PortSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.registryfacade.PortSpec, 5));
};


/**
 * @param {!Array<!proto.registryfacade.PortSpec>} value
 * @return {!proto.registryfacade.StartWorkspaceSpec} returns this
*/
proto.registryfacade.StartWorkspaceSpec.prototype.setPortsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.registryfacade.PortSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.registryfacade.PortSpec}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.addPorts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.registryfacade.PortSpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.registryfacade.StartWorkspaceSpec} returns this
 */
proto.registryfacade.StartWorkspaceSpec.prototype.clearPortsList = function() {
  return this.setPortsList([]);
};


/**
 * repeated EnvironmentVariable envvars = 6;
 * @return {!Array<!proto.registryfacade.EnvironmentVariable>}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.getEnvvarsList = function() {
  return /** @type{!Array<!proto.registryfacade.EnvironmentVariable>} */ (
    jspb.Message.getRepeatedWrapperField(this, imagespec_pb.EnvironmentVariable, 6));
};


/**
 * @param {!Array<!proto.registryfacade.EnvironmentVariable>} value
 * @return {!proto.registryfacade.StartWorkspaceSpec} returns this
*/
proto.registryfacade.StartWorkspaceSpec.prototype.setEnvvarsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.registryfacade.EnvironmentVariable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.registryfacade.EnvironmentVariable}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.addEnvvars = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.registryfacade.EnvironmentVariable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.registryfacade.StartWorkspaceSpec} returns this
 */
proto.registryfacade.StartWorkspaceSpec.prototype.clearEnvvarsList = function() {
  return this.setEnvvarsList([]);
};


/**
 * optional string checkout_location = 7;
 * @return {string}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.getCheckoutLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.StartWorkspaceSpec} returns this
 */
proto.registryfacade.StartWorkspaceSpec.prototype.setCheckoutLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string workspace_location = 8;
 * @return {string}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.getWorkspaceLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.StartWorkspaceSpec} returns this
 */
proto.registryfacade.StartWorkspaceSpec.prototype.setWorkspaceLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional GitSpec git = 9;
 * @return {?proto.registryfacade.GitSpec}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.getGit = function() {
  return /** @type{?proto.registryfacade.GitSpec} */ (
    jspb.Message.getWrapperField(this, proto.registryfacade.GitSpec, 9));
};


/**
 * @param {?proto.registryfacade.GitSpec|undefined} value
 * @return {!proto.registryfacade.StartWorkspaceSpec} returns this
*/
proto.registryfacade.StartWorkspaceSpec.prototype.setGit = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.registryfacade.StartWorkspaceSpec} returns this
 */
proto.registryfacade.StartWorkspaceSpec.prototype.clearGit = function() {
  return this.setGit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.hasGit = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string timeout = 10;
 * @return {string}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.getTimeout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.StartWorkspaceSpec} returns this
 */
proto.registryfacade.StartWorkspaceSpec.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional AdmissionLevel admission = 11;
 * @return {!proto.registryfacade.AdmissionLevel}
 */
proto.registryfacade.StartWorkspaceSpec.prototype.getAdmission = function() {
  return /** @type {!proto.registryfacade.AdmissionLevel} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.registryfacade.AdmissionLevel} value
 * @return {!proto.registryfacade.StartWorkspaceSpec} returns this
 */
proto.registryfacade.StartWorkspaceSpec.prototype.setAdmission = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registryfacade.GitSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.registryfacade.GitSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registryfacade.GitSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.GitSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    email: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registryfacade.GitSpec}
 */
proto.registryfacade.GitSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registryfacade.GitSpec;
  return proto.registryfacade.GitSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registryfacade.GitSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registryfacade.GitSpec}
 */
proto.registryfacade.GitSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registryfacade.GitSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registryfacade.GitSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registryfacade.GitSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.GitSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.registryfacade.GitSpec.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.GitSpec} returns this
 */
proto.registryfacade.GitSpec.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.registryfacade.GitSpec.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.GitSpec} returns this
 */
proto.registryfacade.GitSpec.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registryfacade.PortSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.registryfacade.PortSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registryfacade.PortSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.PortSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0),
    target: jspb.Message.getFieldWithDefault(msg, 2, 0),
    visibility: jspb.Message.getFieldWithDefault(msg, 3, 0),
    url: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registryfacade.PortSpec}
 */
proto.registryfacade.PortSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registryfacade.PortSpec;
  return proto.registryfacade.PortSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registryfacade.PortSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registryfacade.PortSpec}
 */
proto.registryfacade.PortSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTarget(value);
      break;
    case 3:
      var value = /** @type {!proto.registryfacade.PortVisibility} */ (reader.readEnum());
      msg.setVisibility(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registryfacade.PortSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registryfacade.PortSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registryfacade.PortSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.PortSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getVisibility();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.registryfacade.PortSpec.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.registryfacade.PortSpec} returns this
 */
proto.registryfacade.PortSpec.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 target = 2;
 * @return {number}
 */
proto.registryfacade.PortSpec.prototype.getTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.registryfacade.PortSpec} returns this
 */
proto.registryfacade.PortSpec.prototype.setTarget = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional PortVisibility visibility = 3;
 * @return {!proto.registryfacade.PortVisibility}
 */
proto.registryfacade.PortSpec.prototype.getVisibility = function() {
  return /** @type {!proto.registryfacade.PortVisibility} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.registryfacade.PortVisibility} value
 * @return {!proto.registryfacade.PortSpec} returns this
 */
proto.registryfacade.PortSpec.prototype.setVisibility = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.registryfacade.PortSpec.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.PortSpec} returns this
 */
proto.registryfacade.PortSpec.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registryfacade.WorkspaceMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.registryfacade.WorkspaceMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registryfacade.WorkspaceMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.WorkspaceMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: jspb.Message.getFieldWithDefault(msg, 1, ""),
    metaId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registryfacade.WorkspaceMetadata}
 */
proto.registryfacade.WorkspaceMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registryfacade.WorkspaceMetadata;
  return proto.registryfacade.WorkspaceMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registryfacade.WorkspaceMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registryfacade.WorkspaceMetadata}
 */
proto.registryfacade.WorkspaceMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetaId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registryfacade.WorkspaceMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registryfacade.WorkspaceMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registryfacade.WorkspaceMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registryfacade.WorkspaceMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMetaId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string owner = 1;
 * @return {string}
 */
proto.registryfacade.WorkspaceMetadata.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.WorkspaceMetadata} returns this
 */
proto.registryfacade.WorkspaceMetadata.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string meta_id = 2;
 * @return {string}
 */
proto.registryfacade.WorkspaceMetadata.prototype.getMetaId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.registryfacade.WorkspaceMetadata} returns this
 */
proto.registryfacade.WorkspaceMetadata.prototype.setMetaId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.registryfacade.PortVisibility = {
  PORT_VISIBILITY_PRIVATE: 0,
  PORT_VISIBILITY_PUBLIC: 1
};

/**
 * @enum {number}
 */
proto.registryfacade.AdmissionLevel = {
  ADMIT_OWNER_ONLY: 0,
  ADMIT_EVERYONE: 1
};

goog.object.extend(exports, proto.registryfacade);
